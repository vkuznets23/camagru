generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  emailVerified           DateTime?
  image                   String?
  password                String
  username                String                   @unique
  resetToken              String?
  resetTokenExpiry        DateTime?
  bio                     String?
  name                    String?
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @updatedAt
  comments                Comment[]
  emailVerificationTokens EmailVerificationToken[]
  following               Follower[]               @relation("UserFollowing")
  followers               Follower[]               @relation("UserFollowers")
  likedPosts              Like[]
  posts                   Post[]                   @relation("UserPosts")
  sessions                Session[]
  savedPosts              Post[]                   @relation("SavedPosts")
  // Chat relations
  sentMessages            Message[]                @relation("MessageSender")
  receivedMessages        Message[]                @relation("MessageReceiver")
  chatParticipants        ChatParticipant[]
  lastSeen                DateTime?                @default(now())
  isOnline                Boolean                  @default(false)
}

model Post {
  id        String    @id @default(cuid())
  content   String?
  image     String
  userId    String
  createdAt DateTime  @default(now())
  blurDataURL String?
  comments  Comment[]
  likedBy   Like[]
  user      User      @relation("UserPosts", fields: [userId], references: [id])
  savedBy   User[]    @relation("SavedPosts")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Follower {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id])
  following   User   @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  userId  String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chat models
model Chat {
  id           String             @id @default(cuid())
  type         ChatType           @default(DIRECT)
  name         String?            // For group chats
  description  String?            // For group chats
  image        String?            // For group chats
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  lastMessageAt DateTime?         // For sorting chats by last activity
  participants ChatParticipant[]
  messages     Message[]
  
  @@index([lastMessageAt])
}

model ChatParticipant {
  id        String   @id @default(cuid())
  chatId    String
  userId    String
  role      ChatRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?             // When user left the chat
  isActive  Boolean  @default(true)
  
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([chatId, userId])
  @@index([userId])
}

model Message {
  id          String      @id @default(cuid())
  chatId      String
  senderId    String
  receiverId  String?     // For direct messages
  content     String
  type        MessageType @default(TEXT)
  imageUrl    String?     // For image messages
  isRead      Boolean     @default(false)
  isEdited    Boolean     @default(false)
  isDeleted   Boolean     @default(false)
  replyToId   String?     // For reply messages
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  chat        Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender      User        @relation("MessageSender", fields: [senderId], references: [id])
  receiver    User?       @relation("MessageReceiver", fields: [receiverId], references: [id])
  replyTo     Message?    @relation("MessageReply", fields: [replyToId], references: [id])
  replies     Message[]   @relation("MessageReply")
  
  @@index([chatId, createdAt])
  @@index([senderId])
  @@index([receiverId])
}

// Enums
enum ChatType {
  DIRECT
  GROUP
}

enum ChatRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}
