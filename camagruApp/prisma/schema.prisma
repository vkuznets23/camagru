generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String
  image         String?
  bio           String?
  name          String?   //name u show
  createdAt     DateTime?   @default(now())
  updatedAt     DateTime?   @updatedAt
  likedPosts  Like[]


  // dependancies
  posts         Post[] @relation("UserPosts")
  savedPosts    Post[] @relation("SavedPosts")

  comments      Comment[]
  followers Follower[] @relation("UserFollowers")
  following Follower[] @relation("UserFollowing")

  // for passwords/email
  emailVerified     DateTime?
  resetToken        String?
  resetTokenExpiry  DateTime?

  // next-auth
  sessions                  Session[]
  emailVerificationTokens   EmailVerificationToken[]
}

model Post {
  id        String   @id @default(cuid())
  content   String?
  image     String
  userId    String
  createdAt DateTime @default(now())

  user User @relation("UserPosts", fields: [userId], references: [id])
  comments  Comment[]
  likedBy   Like[]

  savedBy  User[] @relation("SavedPosts")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  userId    String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id])
}

model Follower {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower User @relation("UserFollowing", fields: [followerId], references: [id])
  following User @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
