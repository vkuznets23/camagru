generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  emailVerified           DateTime?
  image                   String?
  password                String
  username                String                   @unique
  resetToken              String?
  resetTokenExpiry        DateTime?
  bio                     String?
  name                    String?
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @updatedAt
  comments                Comment[]
  emailVerificationTokens EmailVerificationToken[]
  following               Follower[]               @relation("UserFollowing")
  followers               Follower[]               @relation("UserFollowers")
  likedPosts              Like[]
  posts                   Post[]                   @relation("UserPosts")
  sessions                Session[]
  savedPosts              Post[]                   @relation("SavedPosts")
}

model Post {
  id        String    @id @default(cuid())
  content   String?
  image     String
  userId    String
  createdAt DateTime  @default(now())
  comments  Comment[]
  likedBy   Like[]
  user      User      @relation("UserPosts", fields: [userId], references: [id])
  savedBy   User[]    @relation("SavedPosts")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Follower {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  follower    User   @relation("UserFollowing", fields: [followerId], references: [id])
  following   User   @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model EmailVerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  userId  String
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
